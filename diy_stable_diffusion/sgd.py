# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/12 copy accelerated sgd.ipynb.

# %% auto 0
__all__ = ['BaseSchedCB', 'BatchSchedCB', 'HasLearnCB', 'RecorderCB', 'EpochSchedCB']

# %% ../nbs/12 copy accelerated sgd.ipynb 1
import torch

from .datasets import *
from .conv import *
from .learner import *
from .activations import *
from .init import *

# %% ../nbs/12 copy accelerated sgd.ipynb 30
class BaseSchedCB(Callback):
    def __init__(self, schedulertype):
        self.schedulertype = schedulertype
    
    def before_fit(self, learn):
        self.scheduleinstance = self.schedulertype(learn.opt)
    
    def _step(self, learn):
        if learn.training:
            self.scheduleinstance.step()

class BatchSchedCB(BaseSchedCB):
    def after_batch(self, learn):
        self._step(learn)

class HasLearnCB(Callback):
    def before_fit(self, learn):
        self.learn = learn
    def after_fit(self, learn):
        self.learn = None

class RecorderCB(Callback):
    # recorders are name=fn keyword args where values are functions to be called to capture the so-named record.
    def __init__(self, **recorders):
        self.recorders = recorders
    
    def before_fit(self, learn):
        self.records = {name:[] for name in self.recorders}
        self.param_group = learn.opt.param_groups[0]
    
    def after_batch(self, learn):
        if not learn.training:
            return
        
        # callback var here is just a general
        for name,fn in self.recorders.items():
            self.records[name].append(fn(self))
        
    def plot(self):
        for name,record in self.records.items():
            plt.plot(record, label=name)
            plt.legend()
            plt.show()
        

# %% ../nbs/12 copy accelerated sgd.ipynb 36
class EpochSchedCB(BaseSchedCB):
    def after_epoch(self, learn):
        self._step(learn)
